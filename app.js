(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (process){
/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
"use strict";

var parser = (function () {
    var parser = { trace: function trace() {},
        yy: {},
        symbols_: { "error": 2, "expressions": 3, "e": 4, "EOF": 5, "simpleComp": 6, "+": 7, "-": 8, "*": 9, "/": 10, "%": 11, "^": 12, "(": 13, ")": 14, "|": 15, "OPEN_CEIL": 16, "CLOSE_CEIL": 17, "NUMBER": 18, "COMPLEX": 19, "E": 20, "PI": 21, "I": 22, "FUNCTION": 23, "[": 24, "args": 25, "]": 26, "functionArgs": 27, "ARROW": 28, ":=": 29, "{": 30, "piecestmnts": 31, "}": 32, "ltcomp": 33, "gtcomp": 34, "AND": 35, ",": 36, "LT": 37, "LTE": 38, "GT": 39, "GTE": 40, "comp": 41, "comparison": 42, "piecestmnt": 43, ":": 44, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 5: "EOF", 7: "+", 8: "-", 9: "*", 10: "/", 11: "%", 12: "^", 13: "(", 14: ")", 15: "|", 16: "OPEN_CEIL", 17: "CLOSE_CEIL", 18: "NUMBER", 19: "COMPLEX", 20: "E", 21: "PI", 22: "I", 23: "FUNCTION", 24: "[", 26: "]", 28: "ARROW", 29: ":=", 30: "{", 32: "}", 35: "AND", 36: ",", 37: "LT", 38: "LTE", 39: "GT", 40: "GTE", 44: ":" },
        productions_: [0, [3, 2], [3, 2], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 2], [4, 3], [4, 3], [4, 3], [4, 1], [4, 1], [4, 1], [4, 1], [4, 1], [4, 4], [4, 5], [4, 1], [4, 3], [4, 7], [6, 3], [6, 3], [6, 5], [6, 5], [6, 3], [25, 1], [25, 3], [27, 1], [27, 3], [33, 1], [33, 1], [34, 1], [34, 1], [41, 1], [41, 1], [42, 5], [42, 5], [42, 3], [42, 3], [43, 3], [31, 1], [31, 2]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, /* action[1] */$$, /* vstack */_$, /* lstack */context
        /**/) {
            /* this == yyval */

            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:
                    return $$[$0 - 1];
                    break;
                case 2:
                    return $$[$0 - 1];
                    break;
                case 3:
                    this.$ = { op: $$[$0 - 1], left: $$[$0 - 2], right: $$[$0] };
                    break;
                case 4:
                    this.$ = { op: $$[$0 - 1], left: $$[$0 - 2], right: $$[$0] };
                    break;
                case 5:
                    this.$ = { op: $$[$0 - 1], left: $$[$0 - 2], right: $$[$0] };
                    break;
                case 6:
                    this.$ = { op: $$[$0 - 1], left: $$[$0 - 2], right: $$[$0] };
                    break;
                case 7:
                    this.$ = { op: $$[$0 - 1], left: $$[$0 - 2], right: $$[$0] };
                    break;
                case 8:
                    this.$ = { op: $$[$0 - 1], left: $$[$0 - 2], right: $$[$0] };
                    break;
                case 9:
                    this.$ = { op: $$[$0 - 1], left: null, right: $$[$0] };
                    break;
                case 10:
                    this.$ = $$[$0 - 1];
                    break;
                case 11:
                    this.$ = { call: 'abs', args: [$$[$0 - 1]] };
                    break;
                case 12:
                    this.$ = { call: 'ceil', args: [$$[$0 - 1]] };
                    break;
                case 13:
                    this.$ = complex(parseFloat(yytext));
                    break;
                case 14:
                    this.$ = complex(0, parseFloat(yytext.slice(0, -1)));
                    break;
                case 15:
                    this.$ = complex(Math.E);
                    break;
                case 16:
                    this.$ = complex(Math.PI);
                    break;
                case 17:
                    this.$ = complex(0, 1);
                    break;
                case 18:
                    this.$ = { call: $$[$0 - 3], args: $$[$0 - 1] };
                    break;
                case 19:
                    this.$ = { op: "function", argsList: $$[$0 - 3], expr: $$[$0] };
                    break;
                case 20:
                    this.$ = { variable: $$[$0] };
                    break;
                case 21:
                    this.$ = { op: $$[$0 - 1], left: $$[$0 - 2], right: $$[$0] };
                    break;
                case 22:
                    this.$ = { op: "piece", argsList: $$[$0 - 5], values: $$[$0 - 1] };
                    break;
                case 23:
                    this.$ = { op: $$[$0 - 1], left: $$[$0 - 2], right: $$[$0] };
                    break;
                case 24:
                    this.$ = { op: $$[$0 - 1], left: $$[$0 - 2], right: $$[$0] };
                    break;
                case 25:
                    this.$ = { op: "range", min: $$[$0], max: $$[$0 - 4], expr: $$[$0 - 2] };
                    break;
                case 26:
                    this.$ = { op: "range", min: $$[$0 - 4], max: $$[$0], expr: $$[$0 - 2] };
                    break;
                case 27:
                    this.$ = { op: "and", left: $$[$0 - 2], right: $$[$0] };
                    break;
                case 28:
                    this.$ = [$$[$0]];
                    break;
                case 29:
                    this.$ = $$[$0 - 2].concat([$$[$0]]);
                    break;
                case 30:
                    this.$ = [$$[$0]];
                    break;
                case 31:
                    this.$ = $$[$0 - 2].concat([$$[$0]]);
                    break;
                case 32:
                    this.$ = $$[$0];
                    break;
                case 33:
                    this.$ = $$[$0];
                    break;
                case 34:
                    this.$ = $$[$0];
                    break;
                case 35:
                    this.$ = $$[$0];
                    break;
                case 36:
                    this.$ = $$[$0];
                    break;
                case 37:
                    this.$ = $$[$0];
                    break;
                case 38:
                    this.$ = { op: "range", min: $$[$0], max: $$[$0 - 4], variable: $$[$0 - 2] };
                    break;
                case 39:
                    this.$ = { op: "range", min: $$[$0 - 4], max: $$[$0], variable: $$[$0 - 2] };
                    break;
                case 40:
                    this.$ = { op: $$[$0 - 1], left: $$[$0 - 2], right: $$[$0] };
                    break;
                case 41:
                    this.$ = { op: $$[$0 - 1], left: $$[$0 - 2], right: $$[$0] };
                    break;
                case 42:
                    this.$ = { condition: $$[$0 - 2], value: $$[$0] };
                    break;
                case 43:
                    this.$ = [$$[$0]];
                    break;
                case 44:
                    this.$ = $$[$0 - 1].concat([$$[$0]]);
                    break;
            }
        },
        table: [{ 3: 1, 4: 2, 6: 3, 8: [1, 4], 13: [1, 5], 15: [1, 6], 16: [1, 7], 18: [1, 8], 19: [1, 9], 20: [1, 10], 21: [1, 11], 22: [1, 12], 23: [1, 13], 24: [1, 14] }, { 1: [3] }, { 5: [1, 15], 7: [1, 16], 8: [1, 17], 9: [1, 18], 10: [1, 19], 11: [1, 20], 12: [1, 21], 33: 22, 34: 23, 37: [1, 24], 38: [1, 25], 39: [1, 26], 40: [1, 27] }, { 5: [1, 28], 35: [1, 29] }, { 4: 30, 8: [1, 4], 13: [1, 5], 15: [1, 6], 16: [1, 7], 18: [1, 8], 19: [1, 9], 20: [1, 10], 21: [1, 11], 22: [1, 12], 23: [1, 13], 24: [1, 14] }, { 4: 31, 8: [1, 4], 13: [1, 5], 15: [1, 6], 16: [1, 7], 18: [1, 8], 19: [1, 9], 20: [1, 10], 21: [1, 11], 22: [1, 12], 23: [1, 13], 24: [1, 14] }, { 4: 32, 8: [1, 4], 13: [1, 5], 15: [1, 6], 16: [1, 7], 18: [1, 8], 19: [1, 9], 20: [1, 10], 21: [1, 11], 22: [1, 12], 23: [1, 13], 24: [1, 14] }, { 4: 33, 8: [1, 4], 13: [1, 5], 15: [1, 6], 16: [1, 7], 18: [1, 8], 19: [1, 9], 20: [1, 10], 21: [1, 11], 22: [1, 12], 23: [1, 13], 24: [1, 14] }, { 5: [2, 13], 7: [2, 13], 8: [2, 13], 9: [2, 13], 10: [2, 13], 11: [2, 13], 12: [2, 13], 13: [2, 13], 14: [2, 13], 15: [2, 13], 16: [2, 13], 17: [2, 13], 18: [2, 13], 19: [2, 13], 20: [2, 13], 21: [2, 13], 22: [2, 13], 23: [2, 13], 24: [2, 13], 26: [2, 13], 32: [2, 13], 35: [2, 13], 36: [2, 13], 37: [2, 13], 38: [2, 13], 39: [2, 13], 40: [2, 13], 44: [2, 13] }, { 5: [2, 14], 7: [2, 14], 8: [2, 14], 9: [2, 14], 10: [2, 14], 11: [2, 14], 12: [2, 14], 13: [2, 14], 14: [2, 14], 15: [2, 14], 16: [2, 14], 17: [2, 14], 18: [2, 14], 19: [2, 14], 20: [2, 14], 21: [2, 14], 22: [2, 14], 23: [2, 14], 24: [2, 14], 26: [2, 14], 32: [2, 14], 35: [2, 14], 36: [2, 14], 37: [2, 14], 38: [2, 14], 39: [2, 14], 40: [2, 14], 44: [2, 14] }, { 5: [2, 15], 7: [2, 15], 8: [2, 15], 9: [2, 15], 10: [2, 15], 11: [2, 15], 12: [2, 15], 13: [2, 15], 14: [2, 15], 15: [2, 15], 16: [2, 15], 17: [2, 15], 18: [2, 15], 19: [2, 15], 20: [2, 15], 21: [2, 15], 22: [2, 15], 23: [2, 15], 24: [2, 15], 26: [2, 15], 32: [2, 15], 35: [2, 15], 36: [2, 15], 37: [2, 15], 38: [2, 15], 39: [2, 15], 40: [2, 15], 44: [2, 15] }, { 5: [2, 16], 7: [2, 16], 8: [2, 16], 9: [2, 16], 10: [2, 16], 11: [2, 16], 12: [2, 16], 13: [2, 16], 14: [2, 16], 15: [2, 16], 16: [2, 16], 17: [2, 16], 18: [2, 16], 19: [2, 16], 20: [2, 16], 21: [2, 16], 22: [2, 16], 23: [2, 16], 24: [2, 16], 26: [2, 16], 32: [2, 16], 35: [2, 16], 36: [2, 16], 37: [2, 16], 38: [2, 16], 39: [2, 16], 40: [2, 16], 44: [2, 16] }, { 5: [2, 17], 7: [2, 17], 8: [2, 17], 9: [2, 17], 10: [2, 17], 11: [2, 17], 12: [2, 17], 13: [2, 17], 14: [2, 17], 15: [2, 17], 16: [2, 17], 17: [2, 17], 18: [2, 17], 19: [2, 17], 20: [2, 17], 21: [2, 17], 22: [2, 17], 23: [2, 17], 24: [2, 17], 26: [2, 17], 32: [2, 17], 35: [2, 17], 36: [2, 17], 37: [2, 17], 38: [2, 17], 39: [2, 17], 40: [2, 17], 44: [2, 17] }, { 5: [2, 20], 7: [2, 20], 8: [2, 20], 9: [2, 20], 10: [2, 20], 11: [2, 20], 12: [2, 20], 13: [2, 20], 14: [2, 20], 15: [2, 20], 16: [2, 20], 17: [2, 20], 18: [2, 20], 19: [2, 20], 20: [2, 20], 21: [2, 20], 22: [2, 20], 23: [2, 20], 24: [1, 34], 26: [2, 20], 29: [1, 35], 32: [2, 20], 35: [2, 20], 36: [2, 20], 37: [2, 20], 38: [2, 20], 39: [2, 20], 40: [2, 20], 44: [2, 20] }, { 23: [1, 37], 27: 36 }, { 1: [2, 1] }, { 4: 38, 8: [1, 4], 13: [1, 5], 15: [1, 6], 16: [1, 7], 18: [1, 8], 19: [1, 9], 20: [1, 10], 21: [1, 11], 22: [1, 12], 23: [1, 13], 24: [1, 14] }, { 4: 39, 8: [1, 4], 13: [1, 5], 15: [1, 6], 16: [1, 7], 18: [1, 8], 19: [1, 9], 20: [1, 10], 21: [1, 11], 22: [1, 12], 23: [1, 13], 24: [1, 14] }, { 4: 40, 8: [1, 4], 13: [1, 5], 15: [1, 6], 16: [1, 7], 18: [1, 8], 19: [1, 9], 20: [1, 10], 21: [1, 11], 22: [1, 12], 23: [1, 13], 24: [1, 14] }, { 4: 41, 8: [1, 4], 13: [1, 5], 15: [1, 6], 16: [1, 7], 18: [1, 8], 19: [1, 9], 20: [1, 10], 21: [1, 11], 22: [1, 12], 23: [1, 13], 24: [1, 14] }, { 4: 42, 8: [1, 4], 13: [1, 5], 15: [1, 6], 16: [1, 7], 18: [1, 8], 19: [1, 9], 20: [1, 10], 21: [1, 11], 22: [1, 12], 23: [1, 13], 24: [1, 14] }, { 4: 43, 8: [1, 4], 13: [1, 5], 15: [1, 6], 16: [1, 7], 18: [1, 8], 19: [1, 9], 20: [1, 10], 21: [1, 11], 22: [1, 12], 23: [1, 13], 24: [1, 14] }, { 4: 44, 8: [1, 4], 13: [1, 5], 15: [1, 6], 16: [1, 7], 18: [1, 8], 19: [1, 9], 20: [1, 10], 21: [1, 11], 22: [1, 12], 23: [1, 13], 24: [1, 14] }, { 4: 45, 8: [1, 4], 13: [1, 5], 15: [1, 6], 16: [1, 7], 18: [1, 8], 19: [1, 9], 20: [1, 10], 21: [1, 11], 22: [1, 12], 23: [1, 13], 24: [1, 14] }, { 8: [2, 32], 13: [2, 32], 15: [2, 32], 16: [2, 32], 18: [2, 32], 19: [2, 32], 20: [2, 32], 21: [2, 32], 22: [2, 32], 23: [2, 32], 24: [2, 32] }, { 8: [2, 33], 13: [2, 33], 15: [2, 33], 16: [2, 33], 18: [2, 33], 19: [2, 33], 20: [2, 33], 21: [2, 33], 22: [2, 33], 23: [2, 33], 24: [2, 33] }, { 8: [2, 34], 13: [2, 34], 15: [2, 34], 16: [2, 34], 18: [2, 34], 19: [2, 34], 20: [2, 34], 21: [2, 34], 22: [2, 34], 23: [2, 34], 24: [2, 34] }, { 8: [2, 35], 13: [2, 35], 15: [2, 35], 16: [2, 35], 18: [2, 35], 19: [2, 35], 20: [2, 35], 21: [2, 35], 22: [2, 35], 23: [2, 35], 24: [2, 35] }, { 1: [2, 2] }, { 4: 47, 6: 46, 8: [1, 4], 13: [1, 5], 15: [1, 6], 16: [1, 7], 18: [1, 8], 19: [1, 9], 20: [1, 10], 21: [1, 11], 22: [1, 12], 23: [1, 13], 24: [1, 14] }, { 5: [2, 9], 7: [2, 9], 8: [2, 9], 9: [2, 9], 10: [2, 9], 11: [2, 9], 12: [2, 9], 13: [2, 9], 14: [2, 9], 15: [2, 9], 16: [2, 9], 17: [2, 9], 18: [2, 9], 19: [2, 9], 20: [2, 9], 21: [2, 9], 22: [2, 9], 23: [2, 9], 24: [2, 9], 26: [2, 9], 32: [2, 9], 35: [2, 9], 36: [2, 9], 37: [2, 9], 38: [2, 9], 39: [2, 9], 40: [2, 9], 44: [2, 9] }, { 7: [1, 16], 8: [1, 17], 9: [1, 18], 10: [1, 19], 11: [1, 20], 12: [1, 21], 14: [1, 48] }, { 7: [1, 16], 8: [1, 17], 9: [1, 18], 10: [1, 19], 11: [1, 20], 12: [1, 21], 15: [1, 49] }, { 7: [1, 16], 8: [1, 17], 9: [1, 18], 10: [1, 19], 11: [1, 20], 12: [1, 21], 17: [1, 50] }, { 4: 52, 8: [1, 4], 13: [1, 5], 15: [1, 6], 16: [1, 7], 18: [1, 8], 19: [1, 9], 20: [1, 10], 21: [1, 11], 22: [1, 12], 23: [1, 13], 24: [1, 14], 25: 51 }, { 4: 53, 8: [1, 4], 13: [1, 5], 15: [1, 6], 16: [1, 7], 18: [1, 8], 19: [1, 9], 20: [1, 10], 21: [1, 11], 22: [1, 12], 23: [1, 13], 24: [1, 14] }, { 26: [1, 54], 36: [1, 55] }, { 26: [2, 30], 36: [2, 30] }, { 5: [2, 3], 7: [2, 3], 8: [2, 3], 9: [1, 18], 10: [1, 19], 11: [1, 20], 12: [1, 21], 13: [2, 3], 14: [2, 3], 15: [2, 3], 16: [2, 3], 17: [2, 3], 18: [2, 3], 19: [2, 3], 20: [2, 3], 21: [2, 3], 22: [2, 3], 23: [2, 3], 24: [2, 3], 26: [2, 3], 32: [2, 3], 35: [2, 3], 36: [2, 3], 37: [2, 3], 38: [2, 3], 39: [2, 3], 40: [2, 3], 44: [2, 3] }, { 5: [2, 4], 7: [2, 4], 8: [2, 4], 9: [1, 18], 10: [1, 19], 11: [1, 20], 12: [1, 21], 13: [2, 4], 14: [2, 4], 15: [2, 4], 16: [2, 4], 17: [2, 4], 18: [2, 4], 19: [2, 4], 20: [2, 4], 21: [2, 4], 22: [2, 4], 23: [2, 4], 24: [2, 4], 26: [2, 4], 32: [2, 4], 35: [2, 4], 36: [2, 4], 37: [2, 4], 38: [2, 4], 39: [2, 4], 40: [2, 4], 44: [2, 4] }, { 5: [2, 5], 7: [2, 5], 8: [2, 5], 9: [2, 5], 10: [2, 5], 11: [2, 5], 12: [1, 21], 13: [2, 5], 14: [2, 5], 15: [2, 5], 16: [2, 5], 17: [2, 5], 18: [2, 5], 19: [2, 5], 20: [2, 5], 21: [2, 5], 22: [2, 5], 23: [2, 5], 24: [2, 5], 26: [2, 5], 32: [2, 5], 35: [2, 5], 36: [2, 5], 37: [2, 5], 38: [2, 5], 39: [2, 5], 40: [2, 5], 44: [2, 5] }, { 5: [2, 6], 7: [2, 6], 8: [2, 6], 9: [2, 6], 10: [2, 6], 11: [2, 6], 12: [1, 21], 13: [2, 6], 14: [2, 6], 15: [2, 6], 16: [2, 6], 17: [2, 6], 18: [2, 6], 19: [2, 6], 20: [2, 6], 21: [2, 6], 22: [2, 6], 23: [2, 6], 24: [2, 6], 26: [2, 6], 32: [2, 6], 35: [2, 6], 36: [2, 6], 37: [2, 6], 38: [2, 6], 39: [2, 6], 40: [2, 6], 44: [2, 6] }, { 5: [2, 7], 7: [2, 7], 8: [2, 7], 9: [2, 7], 10: [2, 7], 11: [2, 7], 12: [1, 21], 13: [2, 7], 14: [2, 7], 15: [2, 7], 16: [2, 7], 17: [2, 7], 18: [2, 7], 19: [2, 7], 20: [2, 7], 21: [2, 7], 22: [2, 7], 23: [2, 7], 24: [2, 7], 26: [2, 7], 32: [2, 7], 35: [2, 7], 36: [2, 7], 37: [2, 7], 38: [2, 7], 39: [2, 7], 40: [2, 7], 44: [2, 7] }, { 5: [2, 8], 7: [2, 8], 8: [2, 8], 9: [2, 8], 10: [2, 8], 11: [2, 8], 12: [2, 8], 13: [2, 8], 14: [2, 8], 15: [2, 8], 16: [2, 8], 17: [2, 8], 18: [2, 8], 19: [2, 8], 20: [2, 8], 21: [2, 8], 22: [2, 8], 23: [2, 8], 24: [2, 8], 26: [2, 8], 32: [2, 8], 35: [2, 8], 36: [2, 8], 37: [2, 8], 38: [2, 8], 39: [2, 8], 40: [2, 8], 44: [2, 8] }, { 5: [2, 23], 7: [1, 16], 8: [1, 17], 9: [1, 18], 10: [1, 19], 11: [1, 20], 12: [1, 21], 33: 56, 35: [2, 23], 37: [1, 24], 38: [1, 25] }, { 5: [2, 24], 7: [1, 16], 8: [1, 17], 9: [1, 18], 10: [1, 19], 11: [1, 20], 12: [1, 21], 34: 57, 35: [2, 24], 39: [1, 26], 40: [1, 27] }, { 5: [2, 27], 35: [1, 29] }, { 7: [1, 16], 8: [1, 17], 9: [1, 18], 10: [1, 19], 11: [1, 20], 12: [1, 21], 33: 22, 34: 23, 37: [1, 24], 38: [1, 25], 39: [1, 26], 40: [1, 27] }, { 5: [2, 10], 7: [2, 10], 8: [2, 10], 9: [2, 10], 10: [2, 10], 11: [2, 10], 12: [2, 10], 13: [2, 10], 14: [2, 10], 15: [2, 10], 16: [2, 10], 17: [2, 10], 18: [2, 10], 19: [2, 10], 20: [2, 10], 21: [2, 10], 22: [2, 10], 23: [2, 10], 24: [2, 10], 26: [2, 10], 32: [2, 10], 35: [2, 10], 36: [2, 10], 37: [2, 10], 38: [2, 10], 39: [2, 10], 40: [2, 10], 44: [2, 10] }, { 5: [2, 11], 7: [2, 11], 8: [2, 11], 9: [2, 11], 10: [2, 11], 11: [2, 11], 12: [2, 11], 13: [2, 11], 14: [2, 11], 15: [2, 11], 16: [2, 11], 17: [2, 11], 18: [2, 11], 19: [2, 11], 20: [2, 11], 21: [2, 11], 22: [2, 11], 23: [2, 11], 24: [2, 11], 26: [2, 11], 32: [2, 11], 35: [2, 11], 36: [2, 11], 37: [2, 11], 38: [2, 11], 39: [2, 11], 40: [2, 11], 44: [2, 11] }, { 5: [2, 12], 7: [2, 12], 8: [2, 12], 9: [2, 12], 10: [2, 12], 11: [2, 12], 12: [2, 12], 13: [2, 12], 14: [2, 12], 15: [2, 12], 16: [2, 12], 17: [2, 12], 18: [2, 12], 19: [2, 12], 20: [2, 12], 21: [2, 12], 22: [2, 12], 23: [2, 12], 24: [2, 12], 26: [2, 12], 32: [2, 12], 35: [2, 12], 36: [2, 12], 37: [2, 12], 38: [2, 12], 39: [2, 12], 40: [2, 12], 44: [2, 12] }, { 26: [1, 58], 36: [1, 59] }, { 7: [1, 16], 8: [1, 17], 9: [1, 18], 10: [1, 19], 11: [1, 20], 12: [1, 21], 26: [2, 28], 36: [2, 28] }, { 5: [2, 21], 7: [1, 16], 8: [1, 17], 9: [1, 18], 10: [1, 19], 11: [1, 20], 12: [1, 21], 13: [2, 21], 14: [2, 21], 15: [2, 21], 16: [2, 21], 17: [2, 21], 18: [2, 21], 19: [2, 21], 20: [2, 21], 21: [2, 21], 22: [2, 21], 23: [2, 21], 24: [2, 21], 26: [2, 21], 32: [2, 21], 35: [2, 21], 36: [2, 21], 37: [2, 21], 38: [2, 21], 39: [2, 21], 40: [2, 21], 44: [2, 21] }, { 28: [1, 60] }, { 23: [1, 61] }, { 4: 62, 8: [1, 4], 13: [1, 5], 15: [1, 6], 16: [1, 7], 18: [1, 8], 19: [1, 9], 20: [1, 10], 21: [1, 11], 22: [1, 12], 23: [1, 13], 24: [1, 14] }, { 4: 63, 8: [1, 4], 13: [1, 5], 15: [1, 6], 16: [1, 7], 18: [1, 8], 19: [1, 9], 20: [1, 10], 21: [1, 11], 22: [1, 12], 23: [1, 13], 24: [1, 14] }, { 5: [2, 18], 7: [2, 18], 8: [2, 18], 9: [2, 18], 10: [2, 18], 11: [2, 18], 12: [2, 18], 13: [2, 18], 14: [2, 18], 15: [2, 18], 16: [2, 18], 17: [2, 18], 18: [2, 18], 19: [2, 18], 20: [2, 18], 21: [2, 18], 22: [2, 18], 23: [2, 18], 24: [2, 18], 26: [2, 18], 32: [2, 18], 35: [2, 18], 36: [2, 18], 37: [2, 18], 38: [2, 18], 39: [2, 18], 40: [2, 18], 44: [2, 18] }, { 4: 64, 8: [1, 4], 13: [1, 5], 15: [1, 6], 16: [1, 7], 18: [1, 8], 19: [1, 9], 20: [1, 10], 21: [1, 11], 22: [1, 12], 23: [1, 13], 24: [1, 14] }, { 4: 65, 8: [1, 4], 13: [1, 5], 15: [1, 6], 16: [1, 7], 18: [1, 8], 19: [1, 9], 20: [1, 10], 21: [1, 11], 22: [1, 12], 23: [1, 13], 24: [1, 14], 30: [1, 66] }, { 26: [2, 31], 36: [2, 31] }, { 5: [2, 26], 7: [1, 16], 8: [1, 17], 9: [1, 18], 10: [1, 19], 11: [1, 20], 12: [1, 21], 35: [2, 26] }, { 5: [2, 25], 7: [1, 16], 8: [1, 17], 9: [1, 18], 10: [1, 19], 11: [1, 20], 12: [1, 21], 35: [2, 25] }, { 7: [1, 16], 8: [1, 17], 9: [1, 18], 10: [1, 19], 11: [1, 20], 12: [1, 21], 26: [2, 29], 36: [2, 29] }, { 5: [2, 19], 7: [1, 16], 8: [1, 17], 9: [1, 18], 10: [1, 19], 11: [1, 20], 12: [1, 21], 13: [2, 19], 14: [2, 19], 15: [2, 19], 16: [2, 19], 17: [2, 19], 18: [2, 19], 19: [2, 19], 20: [2, 19], 21: [2, 19], 22: [2, 19], 23: [2, 19], 24: [2, 19], 26: [2, 19], 32: [2, 19], 35: [2, 19], 36: [2, 19], 37: [2, 19], 38: [2, 19], 39: [2, 19], 40: [2, 19], 44: [2, 19] }, { 4: 70, 8: [1, 4], 13: [1, 5], 15: [1, 6], 16: [1, 7], 18: [1, 8], 19: [1, 9], 20: [1, 10], 21: [1, 11], 22: [1, 12], 23: [1, 71], 24: [1, 14], 31: 67, 42: 69, 43: 68 }, { 4: 70, 8: [1, 4], 13: [1, 5], 15: [1, 6], 16: [1, 7], 18: [1, 8], 19: [1, 9], 20: [1, 10], 21: [1, 11], 22: [1, 12], 23: [1, 71], 24: [1, 14], 32: [1, 72], 42: 69, 43: 73 }, { 8: [2, 43], 13: [2, 43], 15: [2, 43], 16: [2, 43], 18: [2, 43], 19: [2, 43], 20: [2, 43], 21: [2, 43], 22: [2, 43], 23: [2, 43], 24: [2, 43], 32: [2, 43] }, { 35: [1, 75], 44: [1, 74] }, { 7: [1, 16], 8: [1, 17], 9: [1, 18], 10: [1, 19], 11: [1, 20], 12: [1, 21], 33: 77, 34: 76, 37: [1, 24], 38: [1, 25], 39: [1, 26], 40: [1, 27] }, { 7: [2, 20], 8: [2, 20], 9: [2, 20], 10: [2, 20], 11: [2, 20], 12: [2, 20], 24: [1, 34], 29: [1, 35], 33: 79, 34: 80, 37: [1, 24], 38: [1, 25], 39: [1, 26], 40: [1, 27], 41: 78 }, { 5: [2, 22], 7: [2, 22], 8: [2, 22], 9: [2, 22], 10: [2, 22], 11: [2, 22], 12: [2, 22], 13: [2, 22], 14: [2, 22], 15: [2, 22], 16: [2, 22], 17: [2, 22], 18: [2, 22], 19: [2, 22], 20: [2, 22], 21: [2, 22], 22: [2, 22], 23: [2, 22], 24: [2, 22], 26: [2, 22], 32: [2, 22], 35: [2, 22], 36: [2, 22], 37: [2, 22], 38: [2, 22], 39: [2, 22], 40: [2, 22], 44: [2, 22] }, { 8: [2, 44], 13: [2, 44], 15: [2, 44], 16: [2, 44], 18: [2, 44], 19: [2, 44], 20: [2, 44], 21: [2, 44], 22: [2, 44], 23: [2, 44], 24: [2, 44], 32: [2, 44] }, { 4: 81, 8: [1, 4], 13: [1, 5], 15: [1, 6], 16: [1, 7], 18: [1, 8], 19: [1, 9], 20: [1, 10], 21: [1, 11], 22: [1, 12], 23: [1, 13], 24: [1, 14] }, { 4: 70, 8: [1, 4], 13: [1, 5], 15: [1, 6], 16: [1, 7], 18: [1, 8], 19: [1, 9], 20: [1, 10], 21: [1, 11], 22: [1, 12], 23: [1, 71], 24: [1, 14], 42: 82 }, { 23: [1, 83] }, { 23: [1, 84] }, { 4: 85, 8: [1, 4], 13: [1, 5], 15: [1, 6], 16: [1, 7], 18: [1, 8], 19: [1, 9], 20: [1, 10], 21: [1, 11], 22: [1, 12], 23: [1, 13], 24: [1, 14] }, { 8: [2, 36], 13: [2, 36], 15: [2, 36], 16: [2, 36], 18: [2, 36], 19: [2, 36], 20: [2, 36], 21: [2, 36], 22: [2, 36], 23: [2, 36], 24: [2, 36] }, { 8: [2, 37], 13: [2, 37], 15: [2, 37], 16: [2, 37], 18: [2, 37], 19: [2, 37], 20: [2, 37], 21: [2, 37], 22: [2, 37], 23: [2, 37], 24: [2, 37] }, { 7: [1, 16], 8: [1, 17], 9: [1, 18], 10: [1, 19], 11: [1, 20], 12: [1, 21], 13: [2, 42], 15: [2, 42], 16: [2, 42], 18: [2, 42], 19: [2, 42], 20: [2, 42], 21: [2, 42], 22: [2, 42], 23: [2, 42], 24: [2, 42], 32: [2, 42] }, { 35: [1, 75], 44: [2, 41] }, { 34: 86, 39: [1, 26], 40: [1, 27] }, { 33: 87, 37: [1, 24], 38: [1, 25] }, { 7: [1, 16], 8: [1, 17], 9: [1, 18], 10: [1, 19], 11: [1, 20], 12: [1, 21], 35: [2, 40], 44: [2, 40] }, { 4: 88, 8: [1, 4], 13: [1, 5], 15: [1, 6], 16: [1, 7], 18: [1, 8], 19: [1, 9], 20: [1, 10], 21: [1, 11], 22: [1, 12], 23: [1, 13], 24: [1, 14] }, { 4: 89, 8: [1, 4], 13: [1, 5], 15: [1, 6], 16: [1, 7], 18: [1, 8], 19: [1, 9], 20: [1, 10], 21: [1, 11], 22: [1, 12], 23: [1, 13], 24: [1, 14] }, { 7: [1, 16], 8: [1, 17], 9: [1, 18], 10: [1, 19], 11: [1, 20], 12: [1, 21], 35: [2, 38], 44: [2, 38] }, { 7: [1, 16], 8: [1, 17], 9: [1, 18], 10: [1, 19], 11: [1, 20], 12: [1, 21], 35: [2, 39], 44: [2, 39] }],
        defaultActions: { 15: [2, 1], 28: [2, 2] },
        parseError: function parseError(str, hash) {
            if (hash.recoverable) {
                this.trace(str);
            } else {
                throw new Error(str);
            }
        },
        parse: function parse(input) {
            var self = this,
                stack = [0],
                vstack = [null],
                lstack = [],
                table = this.table,
                yytext = '',
                yylineno = 0,
                yyleng = 0,
                recovering = 0,
                TERROR = 2,
                EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            this.lexer.setInput(input);
            this.lexer.yy = this.yy;
            this.yy.lexer = this.lexer;
            this.yy.parser = this;
            if (typeof this.lexer.yylloc == 'undefined') {
                this.lexer.yylloc = {};
            }
            var yyloc = this.lexer.yylloc;
            lstack.push(yyloc);
            var ranges = this.lexer.options && this.lexer.options.ranges;
            if (typeof this.yy.parseError === 'function') {
                this.parseError = this.yy.parseError;
            } else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            function lex() {
                var token;
                token = self.lexer.lex() || EOF;
                if (typeof token !== 'number') {
                    token = self.symbols_[token] || token;
                }
                return token;
            }
            var symbol,
                preErrorSymbol,
                state,
                action,
                a,
                r,
                yyval = {},
                p,
                len,
                newState,
                expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (this.lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: this.lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: this.lexer.yylineno,
                        loc: yyloc,
                        expected: expected
                    });
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(this.lexer.yytext);
                        lstack.push(this.lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = this.lexer.yyleng;
                            yytext = this.lexer.yytext;
                            yylineno = this.lexer.yylineno;
                            yyloc = this.lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                        }
                        r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        } };
    /* generated by jison-lex 0.2.1 */
    var lexer = (function () {
        var lexer = {

            EOF: 1,

            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                } else {
                    throw new Error(str);
                }
            },

            // resets the lexer, sets new input
            setInput: function setInput(input) {
                this._input = input;this._more = this._backtrack = this.done = false;this.yylineno = this.yyleng = 0;this.yytext = this.matched = this.match = "";this.conditionStack = ["INITIAL"];this.yylloc = { first_line: 1, first_column: 0, last_line: 1, last_column: 0 };if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                }this.offset = 0;return this;
            },

            // consumes and returns one char from the input
            input: function input() {
                var ch = this._input[0];this.yytext += ch;this.yyleng++;this.offset++;this.match += ch;this.matched += ch;var lines = ch.match(/(?:\r\n?|\n).*/g);if (lines) {
                    this.yylineno++;this.yylloc.last_line++;
                } else {
                    this.yylloc.last_column++;
                }if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }this._input = this._input.slice(1);return ch;
            },

            // unshifts one char (or a string) into the input
            unput: function unput(ch) {
                var len = ch.length;var lines = ch.split(/(?:\r\n?|\n)/g);this._input = ch + this._input;this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);this.offset -= len;var oldLines = this.match.split(/(?:\r\n?|\n)/g);this.match = this.match.substr(0, this.match.length - 1);this.matched = this.matched.substr(0, this.matched.length - 1);if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                }var r = this.yylloc.range;this.yylloc = { first_line: this.yylloc.first_line, last_line: this.yylineno + 1, first_column: this.yylloc.first_column, last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len };if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }this.yyleng = this.yytext.length;return this;
            },

            // When called from action, caches matched text and appends it on next action
            more: function more() {
                this._more = true;return this;
            },

            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject: function reject() {
                if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                } else {
                    return this.parseError("Lexical error on line " + (this.yylineno + 1) + ". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n" + this.showPosition(), { text: "", token: null, line: this.yylineno });
                }return this;
            },

            // retain first n characters of the match
            less: function less(n) {
                this.unput(this.match.slice(n));
            },

            // displays already matched input, i.e. for error messages
            pastInput: function pastInput() {
                var past = this.matched.substr(0, this.matched.length - this.match.length);return (past.length > 20 ? "..." : "") + past.substr(-20).replace(/\n/g, "");
            },

            // displays upcoming input, i.e. for error messages
            upcomingInput: function upcomingInput() {
                var next = this.match;if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }return (next.substr(0, 20) + (next.length > 20 ? "..." : "")).replace(/\n/g, "");
            },

            // displays the character position where the lexing error occurred, i.e. for error messages
            showPosition: function showPosition() {
                var pre = this.pastInput();var c = new Array(pre.length + 1).join("-");return pre + this.upcomingInput() + "\n" + c + "^";
            },

            // test the lexed token: return FALSE when not a match, otherwise return token
            test_match: function test_match(match, indexed_rule) {
                var token, lines, backup;if (this.options.backtrack_lexer) {
                    backup = { yylineno: this.yylineno, yylloc: { first_line: this.yylloc.first_line, last_line: this.last_line, first_column: this.yylloc.first_column, last_column: this.yylloc.last_column }, yytext: this.yytext, match: this.match, matches: this.matches, matched: this.matched, yyleng: this.yyleng, offset: this.offset, _more: this._more, _input: this._input, yy: this.yy, conditionStack: this.conditionStack.slice(0), done: this.done };if (this.options.ranges) {
                        backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                }lines = match[0].match(/(?:\r\n?|\n).*/g);if (lines) {
                    this.yylineno += lines.length;
                }this.yylloc = { first_line: this.yylloc.last_line, last_line: this.yylineno + 1, first_column: this.yylloc.last_column, last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length };this.yytext += match[0];this.match += match[0];this.matches = match;this.yyleng = this.yytext.length;if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }this._more = false;this._backtrack = false;this._input = this._input.slice(match[0].length);this.matched += match[0];token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);if (this.done && this._input) {
                    this.done = false;
                }if (token) {
                    return token;
                } else if (this._backtrack) {
                    for (var k in backup) {
                        this[k] = backup[k];
                    }return false;
                }return false;
            },

            // return next match in input
            next: function next() {
                if (this.done) {
                    return this.EOF;
                }if (!this._input) {
                    this.done = true;
                }var token, match, tempMatch, index;if (!this._more) {
                    this.yytext = "";this.match = "";
                }var rules = this._currentRules();for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;index = i;if (this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rules[i]);if (token !== false) {
                                return token;
                            } else if (this._backtrack) {
                                match = false;continue;
                            } else {
                                return false;
                            }
                        } else if (!this.options.flex) {
                            break;
                        }
                    }
                }if (match) {
                    token = this.test_match(match, rules[index]);if (token !== false) {
                        return token;
                    }return false;
                }if (this._input === "") {
                    return this.EOF;
                } else {
                    return this.parseError("Lexical error on line " + (this.yylineno + 1) + ". Unrecognized text.\n" + this.showPosition(), { text: "", token: null, line: this.yylineno });
                }
            },

            // return next match that has a token
            lex: function lex() {
                var r = this.next();if (r) {
                    return r;
                } else {
                    return this.lex();
                }
            },

            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },

            // pop the previously active lexer condition state off the condition stack
            popState: function popState() {
                var n = this.conditionStack.length - 1;if (n > 0) {
                    return this.conditionStack.pop();
                } else {
                    return this.conditionStack[0];
                }
            },

            // produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules: function _currentRules() {
                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                } else {
                    return this.conditions["INITIAL"].rules;
                }
            },

            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState: function topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);if (n >= 0) {
                    return this.conditionStack[n];
                } else {
                    return "INITIAL";
                }
            },

            // alias for begin(condition)
            pushState: function pushState(condition) {
                this.begin(condition);
            },

            // return the number of states currently on the stack
            stateStackSize: function stateStackSize() {
                return this.conditionStack.length;
            },
            options: {},
            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START
            /**/) {

                var YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0:
                        /* skip whitespace */
                        break;
                    case 1:
                        return 19;
                        break;
                    case 2:
                        return 19;
                        break;
                    case 3:
                        return 18;
                        break;
                    case 4:
                        return 18;
                        break;
                    case 5:
                        return 9;
                        break;
                    case 6:
                        return 10;
                        break;
                    case 7:
                        return 8;
                        break;
                    case 8:
                        return 7;
                        break;
                    case 9:
                        return "%";
                        break;
                    case 10:
                        return ":=";
                        break;
                    case 11:
                        return 28;
                        break;
                    case 12:
                        return 12;
                        break;
                    case 13:
                        return 13;
                        break;
                    case 14:
                        return 14;
                        break;
                    case 15:
                        return 24;
                        break;
                    case 16:
                        return 26;
                        break;
                    case 17:
                        return "|";
                        break;
                    case 18:
                        return 16;
                        break;
                    case 19:
                        return 17;
                        break;
                    case 20:
                        return 35;
                        break;
                    case 21:
                        return 'EQ';
                        break;
                    case 22:
                        return 37;
                        break;
                    case 23:
                        return 39;
                        break;
                    case 24:
                        return 38;
                        break;
                    case 25:
                        return 40;
                        break;
                    case 26:
                        return ":";
                        break;
                    case 27:
                        return 21;
                        break;
                    case 28:
                        return 20;
                        break;
                    case 29:
                        return 22;
                        break;
                    case 30:
                        return 23;
                        break;
                    case 31:
                        return 36;
                        break;
                    case 32:
                        return "{";
                        break;
                    case 33:
                        return "}";
                        break;
                    case 34:
                        return 5;
                        break;
                    case 35:
                        return 'INVALID';
                        break;
                }
            },
            rules: [/^(?:\s+)/, /^(?:\d+(\.\d+)?(e(\+|-)?\d+)?i\b)/, /^(?:\.\d+?(e(\+|-)\d+)?i\b)/, /^(?:\d+(\.\d+)?(e(\+|-)?\d+)?)/, /^(?:\.\d+?(e(\+|-)\d+)?)/, /^(?:\*)/, /^(?:\/)/, /^(?:-)/, /^(?:\+)/, /^(?:%)/, /^(?::=)/, /^(?:=>)/, /^(?:\^)/, /^(?:\()/, /^(?:\))/, /^(?:\[)/, /^(?:\])/, /^(?:\|)/, /^(?:\u2308)/, /^(?:\u2309)/, /^(?:&)/, /^(?:=)/, /^(?:<)/, /^(?:>)/, /^(?:\u2264)/, /^(?:\u2265)/, /^(?::)/, /^(?:\u03c0)/, /^(?:e\b)/, /^(?:i\b)/, /^(?:[a-z]\w*)/, /^(?:,)/, /^(?:\{)/, /^(?:\})/, /^(?:$)/, /^(?:.)/],
            conditions: { "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "inclusive": true } }
        };
        return lexer;
    })();
    parser.lexer = lexer;
    function Parser() {
        this.yy = {};
    }
    Parser.prototype = parser;parser.Parser = Parser;
    return new Parser();
})();

if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = parser;
    exports.Parser = parser.Parser;
    exports.parse = function () {
        return parser.parse.apply(parser, arguments);
    };
    exports.main = function commonjsMain(args) {
        if (!args[1]) {
            console.log("Usage: " + args[0] + " FILE");process.exit(1);
        }var source = require("fs").readFileSync(require("path").normalize(args[1]), "utf8");return exports.parser.parse(source);
    };
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}

}).call(this,require('_process'))

},{"_process":36,"fs":34,"path":35}],2:[function(require,module,exports){
"use strict";

var _Math$sinh = require("babel-runtime/core-js/math/sinh")["default"];

var _Math$cosh = require("babel-runtime/core-js/math/cosh")["default"];

var _Math$tanh = require("babel-runtime/core-js/math/tanh")["default"];

var complex = undefined;

complex = function () {
    var real = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];
    var imag = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];
    return { real: real, imag: imag, isComplex: true };
};
complex.mag = function (z) {
    return Math.sqrt(Math.pow(z.real, 2) + Math.pow(z.imag, 2));
};
complex.neg = function (z) {
    return complex(-z.real, -z.imag);
};
complex.add = function (a, b) {
    return complex(a.real + b.real, a.imag + b.imag);
};
complex.sub = function (a, b) {
    return complex(a.real - b.real, a.imag - b.imag);
};
complex.mul = function (a, b) {
    if (a.imag === 0) {
        return complex(a.real * b.real, a.real * b.imag);
    }
    if (b.imag === 0) {
        return complex(a.real * b.real, a.imag * b.real);
    }

    return complex(a.real * b.real - a.imag * b.imag, a.imag * b.real + a.real * b.imag);
};
complex.div = function (a, b) {
    if (b.imag === 0) {
        return complex(a.real / b.real, a.imag / b.real);
    }

    var lensq = Math.pow(b.real, 2) + Math.pow(b.imag, 2);

    return complex((a.real * b.real + a.imag * b.imag) / lensq, (a.imag * b.real - a.real * b.imag) / lensq);
};
complex.mod = function (a, b) {
    return complex.add(a, complex.mul(b, complex.ceil(complex.neg(complex.div(a, b)))));
};
complex.pow = function (a, b) {
    //    real ^ z
    if (a.imag === 0) {
        //    real ^ real
        if (b.imag === 0) {
            //    root of a negative
            if (a.real < 0 && Math.abs(b.real) < 1) {
                var _firstTerm = undefined;
                var _secondTerm = undefined;

                _firstTerm = complex(complex.mag(a));
                _firstTerm = complex.pow(_firstTerm, b);

                _secondTerm = complex.mul(complex.iPi, b);
                _secondTerm = complex.pow(complex.e, _secondTerm);
                return complex.mul(_firstTerm, _secondTerm);
            }
            return complex(Math.pow(a.real, b.real));
        }
        var log = undefined;
        var coef = undefined;

        coef = Math.pow(a.real, b.real);
        log = Math.log(a.real);

        return complex(coef * Math.cos(b.imag * log), coef * Math.sin(b.imag * log));
    }

    var firstTerm = undefined;
    var secondTerm = undefined;

    firstTerm = complex.mag(a);
    firstTerm = complex.pow(firstTerm, b);

    secondTerm = complex(0, Math.atan2(a.imag, a.real));
    secondTerm = complex.mul(secondTerm, b);
    secondTerm = complex.pow(complex.e, secondTerm);

    return complex.mul(firstTerm, secondTerm);
};

complex.ceil = function (z) {
    return complex(Math.ceil(z.real), Math.ceil(z.imag));
};
complex.floor = function (z) {
    return complex(Math.floor(z.real), Math.floor(z.imag));
};
complex.round = function (z) {
    return complex(Math.round(z.real), Math.round(z.imag));
};

complex.exp = function (z) {
    if (z.imag === 0) {
        return complex(Math.exp(z.real));
    }
    return complex.pow(complex.e, z);
};

var sin = Math.sin;
var cos = Math.cos;
var tan = Math.tan;
var sinh = _Math$sinh;
var cosh = _Math$cosh;
var tanh = _Math$tanh;

var fixTrig = function fixTrig(func) {
    return function (n) {
        return parseFloat(func(n).toFixed(14));
    };
};
sin = fixTrig(sin);
cos = fixTrig(cos);
tan = fixTrig(tan);

complex.sin = function (z) {
    if (z.imag === 0) {
        return complex(sin(z.real));
    }
    if (z.real === 0) {
        return complex(0, sinh(z.imag));
    }
    return complex(sin(z.real) * cosh(z.imag), cos(z.real) * sinh(z.imag));
};
complex.cos = function (z) {
    if (z.imag === 0) {
        return complex(cos(z.real));
    }
    if (z.real === 0) {
        return complex(0, cosh(z.imag));
    }
    return complex(cos(z.real) * cosh(z.imag), sin(z.real) * sinh(z.imag));
};
complex.tan = function (z) {
    if (z.imag === 0) {
        return complex(tan(z.real));
    }
    return complex.div(complex.sin(z), complex.cos(z));
};

complex.sinh = function (z) {
    if (z.imag === 0) {
        return complex(sinh(z.real));
    }
    return complex(sinh(z.real) * cos(z.imag), cosh(z.real) * sin(z.imag));
};
complex.cosh = function (z) {
    if (z.imag === 0) {
        return complex(cosh(z.real));
    }
    return complex(cosh(z.real) * cos(z.imag), sinh(z.real) * sin(z.imag));
};
complex.tanh = function (z) {
    if (z.imag === 0) {
        return complex(tanh(z.real));
    }
    return complex.div(complex.sinh(z), complex.cosh(z));
};

complex.ln = function (z) {
    if (z.imag === 0) {
        return complex(Math.log(z.real));
    }
    var realPart = undefined;
    var imagPart = undefined;

    realPart = complex.mag(z);
    realPart = Math.log(realPart);

    imagPart = Math.atan2(z.imag, z.real);

    return complex(realPart, imagPart);
};
complex.log = function (z, base) {
    if (base.isComplex !== true) {
        base = complex.ten;
    }

    return complex.div(complex.ln(z), complex.ln(base));
};

complex.half = complex(0.5);
complex.iPi = complex(0, Math.PI);
complex.e = complex(Math.E);
complex.one = complex(1);
complex.ten = complex(10);

window.complex = complex;

},{"babel-runtime/core-js/math/cosh":3,"babel-runtime/core-js/math/sinh":4,"babel-runtime/core-js/math/tanh":5}],3:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/math/cosh"), __esModule: true };
},{"core-js/library/fn/math/cosh":10}],4:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/math/sinh"), __esModule: true };
},{"core-js/library/fn/math/sinh":11}],5:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/math/tanh"), __esModule: true };
},{"core-js/library/fn/math/tanh":12}],6:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/assign"), __esModule: true };
},{"core-js/library/fn/object/assign":13}],7:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/define-properties"), __esModule: true };
},{"core-js/library/fn/object/define-properties":14}],8:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/keys"), __esModule: true };
},{"core-js/library/fn/object/keys":15}],9:[function(require,module,exports){
"use strict";

var _Object$assign = require("babel-runtime/core-js/object/assign")["default"];

exports["default"] = _Object$assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

exports.__esModule = true;
},{"babel-runtime/core-js/object/assign":6}],10:[function(require,module,exports){
require('../../modules/es6.math.cosh');
module.exports = require('../../modules/$.core').Math.cosh;
},{"../../modules/$.core":18,"../../modules/es6.math.cosh":29}],11:[function(require,module,exports){
require('../../modules/es6.math.sinh');
module.exports = require('../../modules/$.core').Math.sinh;
},{"../../modules/$.core":18,"../../modules/es6.math.sinh":30}],12:[function(require,module,exports){
require('../../modules/es6.math.tanh');
module.exports = require('../../modules/$.core').Math.tanh;
},{"../../modules/$.core":18,"../../modules/es6.math.tanh":31}],13:[function(require,module,exports){
require('../../modules/es6.object.assign');
module.exports = require('../../modules/$.core').Object.assign;
},{"../../modules/$.core":18,"../../modules/es6.object.assign":32}],14:[function(require,module,exports){
var $ = require('../../modules/$');
module.exports = function defineProperties(T, D){
  return $.setDescs(T, D);
};
},{"../../modules/$":26}],15:[function(require,module,exports){
require('../../modules/es6.object.keys');
module.exports = require('../../modules/$.core').Object.keys;
},{"../../modules/$.core":18,"../../modules/es6.object.keys":33}],16:[function(require,module,exports){
// 19.1.2.1 Object.assign(target, source, ...)
var toObject = require('./$.to-object')
  , IObject  = require('./$.iobject')
  , enumKeys = require('./$.enum-keys');
/* eslint-disable no-unused-vars */
module.exports = Object.assign || function assign(target, source){
/* eslint-enable no-unused-vars */
  var T = toObject(target)
    , l = arguments.length
    , i = 1;
  while(l > i){
    var S      = IObject(arguments[i++])
      , keys   = enumKeys(S)
      , length = keys.length
      , j      = 0
      , key;
    while(length > j)T[key = keys[j++]] = S[key];
  }
  return T;
};
},{"./$.enum-keys":21,"./$.iobject":25,"./$.to-object":28}],17:[function(require,module,exports){
var toString = {}.toString;

module.exports = function(it){
  return toString.call(it).slice(8, -1);
};
},{}],18:[function(require,module,exports){
var core = module.exports = {};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
},{}],19:[function(require,module,exports){
var global    = require('./$.global')
  , core      = require('./$.core')
  , PROTOTYPE = 'prototype';
var ctx = function(fn, that){
  return function(){
    return fn.apply(that, arguments);
  };
};
var $def = function(type, name, source){
  var key, own, out, exp
    , isGlobal = type & $def.G
    , isProto  = type & $def.P
    , target   = isGlobal ? global : type & $def.S
        ? global[name] : (global[name] || {})[PROTOTYPE]
    , exports  = isGlobal ? core : core[name] || (core[name] = {});
  if(isGlobal)source = name;
  for(key in source){
    // contains in native
    own = !(type & $def.F) && target && key in target;
    if(own && key in exports)continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    if(isGlobal && typeof target[key] != 'function')exp = source[key];
    // bind timers to global for call from export context
    else if(type & $def.B && own)exp = ctx(out, global);
    // wrap global constructors for prevent change them in library
    else if(type & $def.W && target[key] == out)!function(C){
      exp = function(param){
        return this instanceof C ? new C(param) : C(param);
      };
      exp[PROTOTYPE] = C[PROTOTYPE];
    }(out);
    else exp = isProto && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export
    exports[key] = exp;
    if(isProto)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
  }
};
// type bitmap
$def.F = 1;  // forced
$def.G = 2;  // global
$def.S = 4;  // static
$def.P = 8;  // proto
$def.B = 16; // bind
$def.W = 32; // wrap
module.exports = $def;
},{"./$.core":18,"./$.global":24}],20:[function(require,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function(it){
  if(it == undefined)throw TypeError("Can't call method on  " + it);
  return it;
};
},{}],21:[function(require,module,exports){
// all enumerable object keys, includes symbols
var $ = require('./$');
module.exports = function(it){
  var keys       = $.getKeys(it)
    , getSymbols = $.getSymbols;
  if(getSymbols){
    var symbols = getSymbols(it)
      , isEnum  = $.isEnum
      , i       = 0
      , key;
    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))keys.push(key);
  }
  return keys;
};
},{"./$":26}],22:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
module.exports = Math.expm1 || function expm1(x){
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
};
},{}],23:[function(require,module,exports){
module.exports = function(exec){
  try {
    return !!exec();
  } catch(e){
    return true;
  }
};
},{}],24:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var UNDEFINED = 'undefined';
var global = module.exports = typeof window != UNDEFINED && window.Math == Math
  ? window : typeof self != UNDEFINED && self.Math == Math ? self : Function('return this')();
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
},{}],25:[function(require,module,exports){
// indexed object, fallback for non-array-like ES3 strings
var cof = require('./$.cof');
module.exports = 0 in Object('z') ? Object : function(it){
  return cof(it) == 'String' ? it.split('') : Object(it);
};
},{"./$.cof":17}],26:[function(require,module,exports){
var $Object = Object;
module.exports = {
  create:     $Object.create,
  getProto:   $Object.getPrototypeOf,
  isEnum:     {}.propertyIsEnumerable,
  getDesc:    $Object.getOwnPropertyDescriptor,
  setDesc:    $Object.defineProperty,
  setDescs:   $Object.defineProperties,
  getKeys:    $Object.keys,
  getNames:   $Object.getOwnPropertyNames,
  getSymbols: $Object.getOwnPropertySymbols,
  each:       [].forEach
};
},{}],27:[function(require,module,exports){
// most Object methods by ES6 should accept primitives
module.exports = function(KEY, exec){
  var $def = require('./$.def')
    , fn   = (require('./$.core').Object || {})[KEY] || Object[KEY]
    , exp  = {};
  exp[KEY] = exec(fn);
  $def($def.S + $def.F * require('./$.fails')(function(){ fn(1); }), 'Object', exp);
};
},{"./$.core":18,"./$.def":19,"./$.fails":23}],28:[function(require,module,exports){
// 7.1.13 ToObject(argument)
var defined = require('./$.defined');
module.exports = function(it){
  return Object(defined(it));
};
},{"./$.defined":20}],29:[function(require,module,exports){
// 20.2.2.12 Math.cosh(x)
var $def = require('./$.def')
  , exp  = Math.exp;

$def($def.S, 'Math', {
  cosh: function cosh(x){
    return (exp(x = +x) + exp(-x)) / 2;
  }
});
},{"./$.def":19}],30:[function(require,module,exports){
// 20.2.2.30 Math.sinh(x)
var $def  = require('./$.def')
  , expm1 = require('./$.expm1')
  , exp   = Math.exp;

$def($def.S, 'Math', {
  sinh: function sinh(x){
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});
},{"./$.def":19,"./$.expm1":22}],31:[function(require,module,exports){
// 20.2.2.33 Math.tanh(x)
var $def  = require('./$.def')
  , expm1 = require('./$.expm1')
  , exp   = Math.exp;

$def($def.S, 'Math', {
  tanh: function tanh(x){
    var a = expm1(x = +x)
      , b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});
},{"./$.def":19,"./$.expm1":22}],32:[function(require,module,exports){
// 19.1.3.1 Object.assign(target, source)
var $def = require('./$.def');
$def($def.S, 'Object', {assign: require('./$.assign')});
},{"./$.assign":16,"./$.def":19}],33:[function(require,module,exports){
// 19.1.2.14 Object.keys(O)
var toObject = require('./$.to-object');

require('./$.object-sap')('keys', function($keys){
  return function keys(it){
    return $keys(toObject(it));
  };
});
},{"./$.object-sap":27,"./$.to-object":28}],34:[function(require,module,exports){

},{}],35:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))

},{"_process":36}],36:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            currentQueue[queueIndex].run();
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],37:[function(require,module,exports){
"use strict";

var _extends = require("babel-runtime/helpers/extends")["default"];

var _Object$defineProperties = require("babel-runtime/core-js/object/define-properties")["default"];

var _Object$keys = require("babel-runtime/core-js/object/keys")["default"];

var _calcLangJs = require("calc-lang.js");

require("complex.js");

window.parser = _calcLangJs.parser;

var _UI = UI;
var ScrollContainer = _UI.ScrollContainer;
var Combobox = _UI.Combobox;
var Option = _UI.Option;
var Button = _UI.Button;
var Image = _UI.Image;
var Spinner = _UI.Spinner;
var RaisedButton = _UI.RaisedButton;
var ImageButton = _UI.ImageButton;
var Checkbox = _UI.Checkbox;
var RadioGroup = _UI.RadioGroup;
var RadioItem = _UI.RadioItem;
var Flexbox = _UI.Flexbox;
var Screen = _UI.Screen;
var RangeInput = _UI.RangeInput;
var Card = _UI.Card;
var TextInput = _UI.TextInput;
var Grid = _UI.Grid;
var VSplit = _UI.VSplit;
var HSplit = _UI.HSplit;
var Touchable = _UI.Touchable;
var _ReactRouter = ReactRouter;
var Route = _ReactRouter.Route;
var RouteHandler = _ReactRouter.RouteHandler;

var Demo = undefined;
var Demo2 = undefined;
var imgSource = undefined;

imgSource = "http://7-themes.com/data_images/out/76/7031783-vivi-ornitier-final-fantasy.jpg";
// imgSource = "https://coedbc.files.wordpress.com/2014/09/screen-shot-2014-09-25-at-1-34-30-pm.png?w=640";
// imgSource = "adriana.jpg";

var functions = {
    trig: {
        sin: complex.sin,
        cos: complex.cos,
        tan: complex.tan,
        sinh: complex.sinh,
        cosh: complex.cosh,
        tanh: complex.tanh
    },
    general: {
        round: complex.round,
        floor: complex.floor,
        ceil: complex.ceil,
        exp: complex.exp,
        ln: complex.ln,
        log: complex.log
    }
};

functions.call = _extends({}, functions.trig, functions.general);

var operator = function operator(op) {
    return function (node, vars) {
        var left = node.left;
        var right = node.right;

        if (left === null) {
            if (typeof right !== 'number') {
                right = maths.eval(right, vars);
            }
            return operator.unary[op](right);
        }

        if (typeof left !== 'number') {
            left = maths.eval(left, vars);
        }

        if (typeof right !== 'number') {
            right = maths.eval(right, vars);
        }

        return operator.binary[op](left, right);
    };
};
operator.binary = {
    "+": function _(l, r) {
        return complex.add(l, r);
    },
    "-": function _(l, r) {
        return complex.sub(l, r);
    },
    "/": function _(l, r) {
        return complex.div(l, r);
    },
    "*": function _(l, r) {
        return complex.mul(l, r);
    },
    "%": function _(l, r) {
        return complex.mod(l, r);
    },
    "^": function _(l, r) {
        return complex.pow(l, r);
    },
    "<": function _(l, r) {
        return l.real < r.real;
    },
    ">": function _(l, r) {
        return l.real > r.real;
    }
};
operator.unary = {
    "-": function _(operand) {
        return complex.neg(operand);
    }
};
var maths = {
    op: {
        "+": operator("+"),
        '-': operator('-'),
        "*": operator("*"),
        '/': operator('/'),
        "%": operator("%"),
        "^": operator("^"),
        "<": operator("<"),
        ">": operator(">")
    },
    eval: function _eval(tree, vars) {
        if (tree.hasOwnProperty('isComplex') === true) {
            return tree;
        }

        if (tree.hasOwnProperty('op') === true) {
            if (tree.op === 'function') {}
            if (tree.op === ":=") {
                var value = undefined;

                if (tree.right.op === "piece") {
                    value = tree.right;
                } else {
                    vars[tree.left] = maths.eval(tree.right);
                }
                return tree.left + " has been set.";
            }
            return maths.op[tree.op](tree, vars);
        }

        if (tree.hasOwnProperty('call') === true) {
            var args = tree.args.map(function (arg) {
                return maths.eval(arg, vars);
            });
            args = args.concat([vars]);
            return functions.call[tree.call].apply(null, args);
        }

        if (tree.hasOwnProperty("variable") === true) {
            return vars[tree.variable];
        }
    }
};

var inputManager = function inputManager() {
    var source = arguments.length <= 0 || arguments[0] === undefined ? "" : arguments[0];

    var lines = source.split("\n");
    var pos = [0, 0];

    return _Object$defineProperties({
        exec: function exec(cmd) {
            var command = cmd.command;
            var value = cmd.value;
            var _pos = pos;
            var lineNum = _pos[0];
            var col = _pos[1];

            var line = undefined;
            switch (command) {
                case "insert":
                    if (value === '\n') {
                        var newLine = undefined;
                        line = lines[lineNum];
                        newLine = line.slice(col);
                        line = line.slice(0, col);
                        lines = [].concat(lines.slice(0, lineNum), [line, newLine], lines.slice(lineNum + 1));
                        pos = [lineNum + 1, 0];
                        return;
                    }
                    line = lines[lineNum];
                    line = line.slice(0, col) + value + line.slice(col);
                    pos = [lineNum, col + value.length];
                    lines[lineNum] = line;
                    break;
                case 'backspace':
                    if (col === 0) {
                        if (lineNum === 0) {
                            return;
                        }
                        var prev = undefined;

                        line = lines[lineNum];
                        prev = lines[lineNum - 1];
                        lines = [].concat(lines.slice(0, lineNum - 1), [prev + line], lines.slice(lineNum + 1));
                        pos = [lineNum - 1, prev.length];
                    } else {
                        line = lines[lineNum];
                        line = line.slice(0, col - 1) + line.slice(col);
                        lines[lineNum] = line;
                        pos = [lineNum, col - 1];
                    }
                    break;
            }
        }
    }, {
        value: {
            get: function get() {
                return lines;
            },
            configurable: true,
            enumerable: true
        },
        cursor: {
            get: function get() {
                return pos;
            },
            set: function set(newPos) {
                pos = newPos;
            },
            configurable: true,
            enumerable: true
        }
    });
};

var Textarea = React.createClass({
    displayName: "Textarea",

    moveCursor: function moveCursor(line, col, evt) {
        this.props.moveCursor(line, col);
        evt.cancelBubble = true;
        evt.stopPropagation();
    },
    render: function render() {
        var _this = this;

        var _props = this.props;
        var lines = _props.lines;
        var cursor = _props.cursor;
        var lineNum = cursor[0];
        var col = cursor[1];

        return React.createElement(
            "div",
            { style: { fontFamily: "monospace", width: '100%', height: '100%', overflow: 'auto', fontSize: 22 } },
            lines.map(function (line, _line) {
                return React.createElement(
                    Touchable,
                    { component: "div", onTap: _this.moveCursor.bind(_this, _line, line.length) },
                    line.split('').concat(" ").map(function (ch, _col) {
                        var style = undefined;

                        style = null;
                        if (_line === lineNum && _col === col) {
                            style = {
                                backgroundColor: 'lightgray'
                            };
                        }
                        if (ch === ' ') {
                            ch = " ";
                        }
                        return React.createElement(
                            Touchable,
                            { component: "span", onTap: _this.moveCursor.bind(_this, _line, _col), style: style },
                            ch
                        );
                    })
                );
            })
        );
    }
});

var Keyboard = React.createClass({
    displayName: "Keyboard",

    getInitialState: function getInitialState() {
        this.kb = {
            text: [['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'], ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l'], ['z', 'x', 'c', 'v', 'b', 'n', 'm'], [":=", ',', "_", "π", '[', ']']],
            number: [["<", ">", '1', '2', '3', '-', "+"], ['≤', '≥', '4', '5', '6', '/', "*"], ['(', ')', '7', '8', '9', '^', '%'], [":=", "|", ',', '0', '.', '[', ']']],
            symbols: [["⌈", "⌉"], [null], [null], [null]]
        };
        return { kb: 'text' };
    },
    onKeyDown: function onKeyDown(key) {
        this.props.onInput({ command: 'insert', value: key });
    },
    render: function render() {
        var _this2 = this;

        var kbName = this.state.kb;

        var style = undefined;
        var kb = undefined;
        var kbNames = undefined;

        kb = this.kb[kbName];
        kbNames = _Object$keys(this.kb);

        style = {
            width: 'calc(100% - 2px)',
            height: 'calc(100% - 2px)',
            lineHeight: '38px',
            minHeight: 0,
            borderRadius: 2,
            border: '1px solid black',
            margin: 1
        };

        return React.createElement(
            "div",
            { style: { height: 248 } },
            React.createElement(
                Flexbox,
                { height: 40, cols: kbNames.length },
                kbNames.map(function (name) {
                    return React.createElement(Button, { text: name, color: name === kbName ? 'cyan' : null, onTap: function () {
                            return _this2.setState({ kb: name });
                        } });
                })
            ),
            kb.map(function (kbRow, index) {
                return React.createElement(
                    Grid,
                    { key: index, rows: 1, cols: kbRow.length, height: 40 },
                    kbRow.map(function (ch, index) {
                        if (ch === null) {
                            return React.createElement("span", null);
                        }
                        return React.createElement(Button, { key: index, text: ch, style: style, onTap: _this2.onKeyDown.bind(_this2, ch) });
                    })
                );
            }),
            React.createElement(
                HSplit,
                { bounds: [75, -75], height: 40 },
                React.createElement(Button, { style: style, text: "↵", onTap: function () {
                        return _this2.onKeyDown('\n');
                    } }),
                React.createElement(Button, { style: style, text: "Space", onTap: function () {
                        return _this2.onKeyDown(" ");
                    } }),
                React.createElement(Button, { style: _extends({}, style, { fontFamily: "Ionicons" }), text: ionic["ion-backspace-outline"], onTap: function () {
                        return _this2.props.onInput({ command: 'backspace' });
                    } })
            )
        );
    }
});

Demo = React.createClass({
    displayName: "Demo",

    mixins: [ReactRouter.Navigation, ReactRouter.State],
    getInitialState: function getInitialState() {
        this.input = inputManager();
        return {
            lines: this.input.value,
            cursor: this.input.cursor,
            result: null,
            vars: {}
        };
    },
    maths: (function (_maths) {
        function maths() {
            return _maths.apply(this, arguments);
        }

        maths.toString = function () {
            return _maths.toString();
        };

        return maths;
    })(function () {
        var vars = this.state.vars;

        var input = undefined;
        var tree = undefined;
        var value = undefined;

        input = this.input.value.join('\n');
        tree = _calcLangJs.parser.parse(input);
        value = maths.eval(tree, vars);

        if (value.isComplex === true) {
            var _value = value;
            var real = _value.real;
            var imag = _value.imag;

            real = parseFloat(real.toPrecision(14));
            imag = parseFloat(imag.toPrecision(14));

            switch (true) {
                case imag === 0:
                    value = real;
                    break;

                case real === 0 && imag !== 0:
                    if (imag === 1) {
                        imag = '';
                    }
                    value = imag + "i";
                    break;

                case real !== 0 && imag !== 0:
                    if (imag === 1) {
                        imag = '';
                    }
                    value = real + " + " + imag + "i";
                    break;
            }
        }

        value = value.toString();

        this.input = new inputManager();

        this.setState({
            lines: this.input.value,
            cursor: this.input.cursor,
            result: value
        });
    }),
    textCommand: function textCommand(cmd) {
        this.input.exec(cmd);
        this.setState({
            lines: this.input.value,
            cursor: this.input.cursor
        });
    },
    moveCursor: function moveCursor(line, col) {
        this.input.cursor = [line, col];
        this.setState({ cursor: this.input.cursor });
    },
    render: function render() {
        return React.createElement(
            Screen,
            { title: "Test" },
            React.createElement(
                VSplit,
                { bounds: [-340, -290, -248] },
                React.createElement(Textarea, { lines: this.state.lines, cursor: this.state.cursor, moveCursor: this.moveCursor }),
                React.createElement(
                    "div",
                    { style: { width: '100%', height: '100%', backgroundColor: '#EEE', color: 'black', fontSize: 20, fontFamily: 'monospace' } },
                    this.state.result
                ),
                React.createElement(RaisedButton, { onTap: this.maths, text: "Calculate" }),
                React.createElement(Keyboard, { onInput: this.textCommand })
            )
        );
    }
});

Demo2 = React.createClass({
    displayName: "Demo2",

    mixins: [ReactRouter.Navigation, ReactRouter.State],
    getInitialState: function getInitialState() {
        return {
            index: 0,
            now: Date.now()
        };
    },
    render: function render() {
        var _this3 = this;

        return React.createElement(
            Screen,
            { title: "Test 2" },
            React.createElement(
                Screen,
                { title: "Nested" },
                React.createElement(RaisedButton, { text: "test", onTap: function () {
                        return _this3.transitionTo("/test/1-1-1970");
                    } }),
                React.createElement(Image, { height: 350, source: imgSource })
            )
        );
    }
});

var Wrap = React.createClass({
    displayName: "Wrap",

    mixins: [ReactRouter.State],
    getInitialState: function getInitialState() {
        return { title: null };
    },
    render: function render() {
        var _getParams = this.getParams();

        var id = _getParams.id;

        return React.createElement(
            VSplit,
            { bounds: [-50] },
            React.createElement(
                App.ScreenTransition,
                { action: this.props.action },
                React.createElement(RouteHandler, null)
            ),
            React.createElement(RaisedButton, { text: "Still" })
        );
    }
});

App.start(React.createElement(
    Route,
    null,
    React.createElement(Route, { path: "/", handler: Demo }),
    React.createElement(Route, { path: "/test/:id", handler: Demo2 })
));

},{"babel-runtime/core-js/object/define-properties":7,"babel-runtime/core-js/object/keys":8,"babel-runtime/helpers/extends":9,"calc-lang.js":1,"complex.js":2}]},{},[37])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
