Modules
    = _ modules:(Module _)* {
        return modules.map(module => module[0]);
    }

Module
    = _ "module" _ name:Word _ "{" _ stuff:((Function / ObjectThing) _)* "}" {
        stuff = stuff.map(item => item[0]).reduce(
            (groups, group) => {
                if (groups.hasOwnProperty(group.type) === false) {
                    groups[group.type] = [];
                }
                groups[group.type].push(group);
                return groups;
            },
            {}
        );
        var module = {name};
        for (var type of Object.keys(stuff)) {
            module[type] = stuff[type];
        }
        return module;
    }

Function
    = type:"function" _ name:Word _ "{" _ props:(Property _)* "}" {
        props = props.map(prop => prop[0]);
        return {
            type,
            name,
            props
        };
    }

ObjectThing
    = type:$[a-zA-Z]+ _ name:Word _ "{" _ props:(Property _)* "}" {
        props = props.map(prop => prop[0]);
        return {
            type,
            name,
            props
        };
    }

Object
    = "object" _ name:Word _ "{" _ params:Property _ "}" {
        return {
            type: "object",
            name,
            params
        };
    }

Property
    = "@" type:$[a-zA-Z]+ _ name:Word? _ "{" _ params:(Parameter _)* "}" {
        params = params.map(param => param[0]);
        return {
            type,
            name,
            params
        }
    }

Sentence
    = words:$(Word (_ (Word / BracketedSequence))*) {
        return words;
    }

Word
    = word:$[a-zA-Z_.?0-9/\[\]\\!:;'"<>/()=>$`,]+ {
        return word;
    }

BracketedSequence
    = $("{" Sentence "}")
    / $("{" _ "}")

Parameter
    = "@" param:Word value:(_ Sentence)? {
        if (value !== null) {
            value = value[1];
        }
        return {param, value};
    }

_ "whitespace"
  = [ \t\n\r]*